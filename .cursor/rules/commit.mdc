---
description: Enforce automatic, atomic commits and pushes to GitHub for cd-form-library.
globs:
  - "**/*"
alwaysApply: true
---

# Cursor Rules — Commit Policy

## Purpose
Every meaningful change must be committed and pushed to `https://github.com/CorporateDirect/cd-form-library` with clear, atomic messages. No dangling edits.

## Defaults
- **Branch:** `main` (use feature branches for bigger work)
- **Remote:** `origin` → `https://github.com/CorporateDirect/cd-form-library`
- **Scope tags:** `rules`, `features`, `docs`, `build`, `chore`, `tests`, `ci`

## When to Commit
- After **each successful file edit** (rule updates, feature specs, docs, code).
- Bundle multiple micro-edits **only** if they are one logical change.
- Do **not** leave the working tree dirty between tasks.

## Commit Message Format

**Examples**
- `rules: add input-format (data-input) spec`
- `features/repeat: add TryFormly reindexing notes`
- `docs: clarify form-wrapper-visibility data-show-when syntax`
- `tests: add cases for caret deletion on date mask`

If a change alters attribute contracts or removes a feature, prefix:
- `BREAKING: rules: deprecate data-cd-success-target`

## Push Policy
- Push immediately after each commit: `git push origin <current-branch>`
- If push is rejected (remote changed), run:
  - `git pull --rebase`
  - re-run the commit if needed
  - `git push`

## Conflict & Rebase Rules
- Prefer **rebase** over merge for local divergence.
- Resolve conflicts minimally; do not rewrite unrelated files.
- Keep commit history linear and readable.

## Staging Rules
- Include only files that were intentionally modified.
- Never commit local secrets or OS/editor junk:
  - Respect `.gitignore` (Node modules, build artifacts, OS files).

## Sign-off (optional)
- If DCO/CLA required later, include `--signoff`.

## Acceptance Checklist (enforced by agents)
- [ ] No uncommitted changes after an edit.
- [ ] Commit message is atomic and scoped.
- [ ] Push succeeds to `origin/<branch>`.
- [ ] No unrelated files staged.
- [ ] No conflicts left unresolved.

## Examples (agent flow)
- After editing `.cursor/rules/webflow-form-functionality-rules.mdc`:
  - `git add .cursor/rules/webflow-form-functionality-rules.mdc`
  - `git commit -m "rules: add Input Formatting (data-input) section"`
  - `git push origin main`

- After adding `/src/features/repeat.ts`:
  - `git add src/features/repeat.ts`
  - `git commit -m "features/repeat: initial scaffold for dynamic rows"`
  - `git push origin main`

## NPM Publishing & CDN Generation

### Required Process for Every Commit
After committing and pushing to GitHub, **always** follow these steps to make the library available via UNPKG:

1. **Update Version Numbers**
   - Increment version in `package.json`
   - Update version constant in `src/index.ts`
   - Update version in `dist/index.js` (if manually edited)

2. **Build & Publish to NPM**
   ```bash
   npm run build
   npm publish
   ```

3. **Verify NPM Publication**
   ```bash
   npm view cd-form-library version
   ```

4. **Generate UNPKG Script**
   After successful npm publish, provide the UNPKG script:
   ```html
   <script src="https://unpkg.com/cd-form-library@x.y.z/dist/index.js"></script>
   ```

### Version Management
- Use semantic versioning (x.y.z)
- **Patch** (0.0.1): Bug fixes, small improvements
- **Minor** (0.1.0): New features, non-breaking changes  
- **Major** (1.0.0): Breaking changes, major rewrites

### UNPKG Availability
- UNPKG serves from npm registry, not GitHub
- Allow 1-2 minutes for UNPKG cache to update after npm publish
- Verify availability: `curl -I https://unpkg.com/cd-form-library@x.y.z/dist/index.js`

### Complete Agent Workflow Example
```bash
# 1. Make changes and commit
git add .
git commit -m "features: add form wrapper visibility"
git push origin main

# 2. Update version and publish
# (Update package.json version first)
npm run build
npm publish

# 3. Provide UNPKG script
echo "UNPKG Script: <script src=\"https://unpkg.com/cd-form-library@x.y.z/dist/index.js\"></script>"
```

### Acceptance Checklist (NPM & CDN)
- [ ] Version updated in package.json, src/index.ts, and dist/index.js
- [ ] Code built successfully with `npm run build`
- [ ] Published to npm with `npm publish`
- [ ] NPM version verified with `npm view cd-form-library version`
- [ ] UNPKG script provided with correct version number
- [ ] UNPKG URL accessibility confirmed

 ### DO NOT INCLUDE CLAUDE CODE ATTRIBUTION WHEN COMMITTING!